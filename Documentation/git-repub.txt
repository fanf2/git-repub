git-repub(1)
=============

NAME
----
git-repub - Make rebasing branches and their history publishable

SYNOPSIS
--------
[verse]
'git repub' [options] [--rw <branch>] [--ff <branch>]

DESCRIPTION
-----------
The 'git repub' command maintains a "repub branch" that you can use to
record the history of another "rebasing branch" that is repeatedly
rewound. Updates to the repub branch are fast-forwards, so they are
convenient to publish.

The `--rw` branch is the rebasing branch and the `--ff` branch is the
repub branch onto which 'git repub' will add another commit. If one of
`--rw` or `--ff` is missing, the other defaults to the current branch.
If both are missing, the current branch's config is checked to find
its corresponding rebasing or repub branch.

The commits on a repub branch are merges, where the first parent is
the previous head of the repub branch and the second parent is the
head of the rebasing branch. The tree resulting from the merge is
always the same as the tree at the head of the rebasing branch - the
previous contents of the repub branch are ignored. Because this is a
somewhat heavy-handed operation, and to protect against mistakes, by
default 'git repub' checks that the head of the repub branch matches
this structure.

The 'git repub' command performs a similar function to `stg publish`,
though the structure of a repub branch is rather different from a
StGit public branch. A repub branch can be thought of as tracking
the head of the rebasing branch in a similar way to its reflog,
except it is updated manually and it is shareable.

People who have obtained a copy of a repub branch can use `git repub
--unpub` to update their copy of the rebasing branch to the latest
version. The weird structure of the repub branch makes it awkward to
work with directly.

The `git repub` command is intended to support one writer and multiple
readers, for example to support code review, or deployment of local
patches. It does not provide any support for collaboration between
multiple people working on a topic branch.

OPTIONS
-------
--rw <branch>::
	The rebasing branch whose head is to be published. If the
	`--rw` option is not given and `--ff` is given, the `--rw`
	<branch> defaults to the current branch.

--ff <branch>::
	The repub branch on which a merge commit will be constructed.
	If the `--ff` option is not given and `--rw` is given, the
	`--ff` <branch> defaults to the current branch.

-s|--status::
	Report the current state of the repub and rebasing branches.

--unpub::
	Update the rebasing branch to the latest version on the repub
	branch, provided the repub branch is newer.

--dry-run::
	Do not make any commits, but report what would happen.

--init::
	Short for --config --start.

--config::
	Record the --from and --onto options in the repository's
	configuration as well as making the merge commit. (See
	CONFIGURATION below.)

--config-only::
	Just record the configuration and do not make the merge
	commit. Equivalent to --config --dry-run.

--start::
	Create the repub branch. Two commits will be created
	immediately: the first commit will be empty and the second
	commit will be a 'git repub' merge.

	In `--unpub` mode, create the rebasing branch if necessary.

--force::
	Do not check that the head of the --onto branch is a 'git
	repub' merge.

CONFIGURATION
-------------

branch.<branch>.repub-ff::
	Indicates that the <branch> is a rebasing branch, and the
	corresponding repub branch is the value of this config
	setting.

branch.<branch>.repub-rw::
	Indicates that the <branch> is a repub branch, and the
	corresponding rebasing branch is the value of this config
	setting.

SEE ALSO
--------
linkgit:git-rebase[1],
linkgit:git-reflog[1],
linkgit:stg-publish[1]

GIT
---
Part of the linkgit:git[1] suite
